name: PR Serial Quality Gates

on:
  pull_request:
    branches:
      - main
      - master
      - develop
      - staging
      - '**'

jobs:
  checks:
    name: Serial PR Checks
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cleanup step that runs even if job fails
      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Cleaning up after failed job..."
          rm -rf node_modules
          rm -rf client/node_modules
          rm -rf client/coverage
          rm -rf server/build
          rm -rf .gradle
          docker-compose down -v 2>/dev/null || true
          echo "Cleanup completed"

      # ---- Frontend (TypeScript) ----
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies (frontend)
        working-directory: ./client
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./client
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright system dependencies
        working-directory: ./client
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Lint (frontend)
        working-directory: ./client
        run: npx eslint src/**/*.ts
      - name: Type Check (frontend)
        working-directory: ./client
        run: npx tsc --noEmit
      - name: Unit Tests (frontend)
        working-directory: ./client
        run: npx jest --testPathIgnorePatterns=/integration/ --testPathIgnorePatterns=/e2e/
      # - name: Integration Tests (frontend)
      #   working-directory: ./client
      #   run: npx jest --config jest.integration.config.js
      #   Note: Temporarily disabled due to supertest v7 compatibility issues with mock server
      # - name: E2E Tests (frontend)
      #   working-directory: ./client
      #   run: npx playwright test
      #   Note: Temporarily disabled due to webkit timing issues (see #19)
      - name: Coverage Report (frontend)
        working-directory: ./client
        run: npx jest --coverage

      # ---- Coverage Threshold (frontend) ----
      - name: Coverage Threshold Check
        working-directory: ./client
        run: |
          # Adjust the threshold as needed
          THRESHOLD=85
          COVERAGE=$(grep -oP 'All files[^|]*\|\s*\K[0-9\.]+(?=%)' coverage/lcov-report/index.html | head -1)
          echo "Detected coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
            exit 1
          fi

      - name: Security Audit (frontend)
        working-directory: ./client
        run: npm audit --audit-level=moderate

      # ---- Backend (Kotlin/Ktor) ----
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'  # Built-in Gradle caching

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            server/.gradle
            server/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build & Test (backend)
        working-directory: ./server
        run: ./gradlew clean build test

      # ---- Docker Build & Health Check ----
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker Compose config validation
        run: docker compose -f docker-compose.yml config

      - name: Build Docker images
        run: docker compose -f docker-compose.yml build --parallel

      - name: Start Docker services
        run: docker compose -f docker-compose.yml up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."
          sleep 10
          docker compose -f docker-compose.yml ps

          # Check if containers are running
          if ! docker compose -f docker-compose.yml ps | grep -q "Up"; then
            echo "Services failed to start"
            docker compose -f docker-compose.yml logs
            exit 1
          fi

          # Test nginx is responding
          curl -f http://localhost:8080 || {
            echo "Nginx health check failed"
            docker compose -f docker-compose.yml logs
            exit 1
          }

          echo "All services healthy!"

      - name: Stop and cleanup Docker services
        if: always()
        run: docker compose -f docker-compose.yml down -v

      # ---- Security Scanning ----
      - name: Gradle Dependency Check
        working-directory: ./server
        run: ./gradlew dependencyCheckAnalyze || true
        # Note: Add OWASP dependency-check plugin to build.gradle.kts for this

      # ---- Artifact Upload (optional, uncomment to use) ----
      # - name: Upload Coverage Artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: ./client/coverage/

      # ---- Deployment (optional, uncomment to use) ----
      # - name: Deploy to Staging
      #   run: |
      #     echo "Deploying to staging environment..."
      #     # Add your deployment script/command here

      # ---- Quality Gate ----
      - name: All checks passed
        run: echo "All serial checks passed successfully!"
