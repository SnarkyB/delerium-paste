name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install dependencies
        run: |
          cd client
          npm ci
          
      - name: Run linter
        run: |
          cd client
          npm run lint
          
      - name: Run type check
        run: |
          cd client
          npm run typecheck
          
      - name: Run unit tests
        run: |
          cd client
          npm run test:unit
          
      - name: Build client
        run: |
          cd client
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            set -e
            echo "?? Starting deployment..."
            
            # Navigate to project directory
            cd ~/delerium-paste
            
            # Pull latest changes
            echo "?? Pulling latest code..."
            git fetch origin
            git checkout main
            git pull origin main
            
            # Build client
            echo "?? Building client..."
            cd client
            npm ci --quiet
            npm run build
            cd ..
            
            # Stop old containers
            echo "?? Stopping old containers..."
            docker compose -f docker-compose.prod.yml down
            
            # Clean up old images
            echo "?? Cleaning up old images..."
            docker system prune -f
            
            # Build and start new containers
            echo "?? Building and starting containers..."
            docker compose -f docker-compose.prod.yml build --parallel
            docker compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be healthy
            echo "? Waiting for services to start..."
            sleep 10
            
            # Check status
            echo "? Deployment complete! Service status:"
            docker compose -f docker-compose.prod.yml ps
            
      - name: Health check
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
          script: |
            # Check if services are running
            if docker compose -f ~/delerium-paste/docker-compose.prod.yml ps | grep -q "Up"; then
              echo "? Services are running"
              exit 0
            else
              echo "? Services failed to start"
              docker compose -f ~/delerium-paste/docker-compose.prod.yml logs --tail=50
              exit 1
            fi
            
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "? Deployment successful!"
          else
            echo "? Deployment failed!"
          fi
